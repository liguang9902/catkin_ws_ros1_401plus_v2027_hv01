// Generated by gencpp from file segway_msgs/ros_clear_chassis_error_code_cmdRequest.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_ROS_CLEAR_CHASSIS_ERROR_CODE_CMDREQUEST_H
#define SEGWAY_MSGS_MESSAGE_ROS_CLEAR_CHASSIS_ERROR_CODE_CMDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct ros_clear_chassis_error_code_cmdRequest_
{
  typedef ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> Type;

  ros_clear_chassis_error_code_cmdRequest_()
    : clear_chassis_error_code_cmd(false)  {
    }
  ros_clear_chassis_error_code_cmdRequest_(const ContainerAllocator& _alloc)
    : clear_chassis_error_code_cmd(false)  {
  (void)_alloc;
    }



   typedef uint8_t _clear_chassis_error_code_cmd_type;
  _clear_chassis_error_code_cmd_type clear_chassis_error_code_cmd;





  typedef boost::shared_ptr< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ros_clear_chassis_error_code_cmdRequest_

typedef ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<std::allocator<void> > ros_clear_chassis_error_code_cmdRequest;

typedef boost::shared_ptr< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest > ros_clear_chassis_error_code_cmdRequestPtr;
typedef boost::shared_ptr< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest const> ros_clear_chassis_error_code_cmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator1> & lhs, const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.clear_chassis_error_code_cmd == rhs.clear_chassis_error_code_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator1> & lhs, const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed316348381b3574671b6c138222a48e";
  }

  static const char* value(const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed316348381b3574ULL;
  static const uint64_t static_value2 = 0x671b6c138222a48eULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/ros_clear_chassis_error_code_cmdRequest";
  }

  static const char* value(const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool     clear_chassis_error_code_cmd #//Clear the error code of the chassis, excluding warnings and exceptions\n"
;
  }

  static const char* value(const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clear_chassis_error_code_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ros_clear_chassis_error_code_cmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::ros_clear_chassis_error_code_cmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "clear_chassis_error_code_cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clear_chassis_error_code_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_ROS_CLEAR_CHASSIS_ERROR_CODE_CMDREQUEST_H
