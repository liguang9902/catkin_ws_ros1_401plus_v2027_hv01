// Generated by gencpp from file segway_msgs/error_code_fb.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_ERROR_CODE_FB_H
#define SEGWAY_MSGS_MESSAGE_ERROR_CODE_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct error_code_fb_
{
  typedef error_code_fb_<ContainerAllocator> Type;

  error_code_fb_()
    : host_error(0)
    , central_error(0)
    , front_left_motor_error(0)
    , front_right_motor_error(0)
    , rear_left_motor_error(0)
    , rear_right_motor_error(0)
    , bms_error(0)
    , brake_error(0)  {
    }
  error_code_fb_(const ContainerAllocator& _alloc)
    : host_error(0)
    , central_error(0)
    , front_left_motor_error(0)
    , front_right_motor_error(0)
    , rear_left_motor_error(0)
    , rear_right_motor_error(0)
    , bms_error(0)
    , brake_error(0)  {
  (void)_alloc;
    }



   typedef uint32_t _host_error_type;
  _host_error_type host_error;

   typedef uint32_t _central_error_type;
  _central_error_type central_error;

   typedef uint32_t _front_left_motor_error_type;
  _front_left_motor_error_type front_left_motor_error;

   typedef uint32_t _front_right_motor_error_type;
  _front_right_motor_error_type front_right_motor_error;

   typedef uint32_t _rear_left_motor_error_type;
  _rear_left_motor_error_type rear_left_motor_error;

   typedef uint32_t _rear_right_motor_error_type;
  _rear_right_motor_error_type rear_right_motor_error;

   typedef uint32_t _bms_error_type;
  _bms_error_type bms_error;

   typedef uint32_t _brake_error_type;
  _brake_error_type brake_error;





  typedef boost::shared_ptr< ::segway_msgs::error_code_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::error_code_fb_<ContainerAllocator> const> ConstPtr;

}; // struct error_code_fb_

typedef ::segway_msgs::error_code_fb_<std::allocator<void> > error_code_fb;

typedef boost::shared_ptr< ::segway_msgs::error_code_fb > error_code_fbPtr;
typedef boost::shared_ptr< ::segway_msgs::error_code_fb const> error_code_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::error_code_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::error_code_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::error_code_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::error_code_fb_<ContainerAllocator2> & rhs)
{
  return lhs.host_error == rhs.host_error &&
    lhs.central_error == rhs.central_error &&
    lhs.front_left_motor_error == rhs.front_left_motor_error &&
    lhs.front_right_motor_error == rhs.front_right_motor_error &&
    lhs.rear_left_motor_error == rhs.rear_left_motor_error &&
    lhs.rear_right_motor_error == rhs.rear_right_motor_error &&
    lhs.bms_error == rhs.bms_error &&
    lhs.brake_error == rhs.brake_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::error_code_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::error_code_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::error_code_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::error_code_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::error_code_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::error_code_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::error_code_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::error_code_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::error_code_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0de715e9b0108218da1d2b8fa36d04b";
  }

  static const char* value(const ::segway_msgs::error_code_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0de715e9b010821ULL;
  static const uint64_t static_value2 = 0x8da1d2b8fa36d04bULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::error_code_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/error_code_fb";
  }

  static const char* value(const ::segway_msgs::error_code_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::error_code_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 host_error\n"
"uint32 central_error\n"
"uint32 front_left_motor_error\n"
"uint32 front_right_motor_error\n"
"uint32 rear_left_motor_error\n"
"uint32 rear_right_motor_error\n"
"uint32 bms_error\n"
"uint32 brake_error\n"
;
  }

  static const char* value(const ::segway_msgs::error_code_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::error_code_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.host_error);
      stream.next(m.central_error);
      stream.next(m.front_left_motor_error);
      stream.next(m.front_right_motor_error);
      stream.next(m.rear_left_motor_error);
      stream.next(m.rear_right_motor_error);
      stream.next(m.bms_error);
      stream.next(m.brake_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct error_code_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::error_code_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::error_code_fb_<ContainerAllocator>& v)
  {
    s << indent << "host_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.host_error);
    s << indent << "central_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.central_error);
    s << indent << "front_left_motor_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.front_left_motor_error);
    s << indent << "front_right_motor_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.front_right_motor_error);
    s << indent << "rear_left_motor_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rear_left_motor_error);
    s << indent << "rear_right_motor_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rear_right_motor_error);
    s << indent << "bms_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bms_error);
    s << indent << "brake_error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.brake_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_ERROR_CODE_FB_H
