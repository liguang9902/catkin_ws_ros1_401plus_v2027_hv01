// Generated by gencpp from file segway_msgs/speed_fb.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_SPEED_FB_H
#define SEGWAY_MSGS_MESSAGE_SPEED_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct speed_fb_
{
  typedef speed_fb_<ContainerAllocator> Type;

  speed_fb_()
    : car_speed(0.0)
    , turn_speed(0.0)
    , fl_speed(0.0)
    , fr_speed(0.0)
    , rl_speed(0.0)
    , rr_speed(0.0)
    , speed_timestamp(0)  {
    }
  speed_fb_(const ContainerAllocator& _alloc)
    : car_speed(0.0)
    , turn_speed(0.0)
    , fl_speed(0.0)
    , fr_speed(0.0)
    , rl_speed(0.0)
    , rr_speed(0.0)
    , speed_timestamp(0)  {
  (void)_alloc;
    }



   typedef float _car_speed_type;
  _car_speed_type car_speed;

   typedef float _turn_speed_type;
  _turn_speed_type turn_speed;

   typedef float _fl_speed_type;
  _fl_speed_type fl_speed;

   typedef float _fr_speed_type;
  _fr_speed_type fr_speed;

   typedef float _rl_speed_type;
  _rl_speed_type rl_speed;

   typedef float _rr_speed_type;
  _rr_speed_type rr_speed;

   typedef uint64_t _speed_timestamp_type;
  _speed_timestamp_type speed_timestamp;





  typedef boost::shared_ptr< ::segway_msgs::speed_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::speed_fb_<ContainerAllocator> const> ConstPtr;

}; // struct speed_fb_

typedef ::segway_msgs::speed_fb_<std::allocator<void> > speed_fb;

typedef boost::shared_ptr< ::segway_msgs::speed_fb > speed_fbPtr;
typedef boost::shared_ptr< ::segway_msgs::speed_fb const> speed_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::speed_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::speed_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::speed_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::speed_fb_<ContainerAllocator2> & rhs)
{
  return lhs.car_speed == rhs.car_speed &&
    lhs.turn_speed == rhs.turn_speed &&
    lhs.fl_speed == rhs.fl_speed &&
    lhs.fr_speed == rhs.fr_speed &&
    lhs.rl_speed == rhs.rl_speed &&
    lhs.rr_speed == rhs.rr_speed &&
    lhs.speed_timestamp == rhs.speed_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::speed_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::speed_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::speed_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::speed_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::speed_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::speed_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::speed_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::speed_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::speed_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30be48766c9248b4c4c4b871092b7330";
  }

  static const char* value(const ::segway_msgs::speed_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30be48766c9248b4ULL;
  static const uint64_t static_value2 = 0xc4c4b871092b7330ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::speed_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/speed_fb";
  }

  static const char* value(const ::segway_msgs::speed_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::speed_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 car_speed\n"
"float32 turn_speed\n"
"float32 fl_speed\n"
"float32 fr_speed\n"
"float32 rl_speed\n"
"float32 rr_speed\n"
"uint64 speed_timestamp\n"
;
  }

  static const char* value(const ::segway_msgs::speed_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::speed_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_speed);
      stream.next(m.turn_speed);
      stream.next(m.fl_speed);
      stream.next(m.fr_speed);
      stream.next(m.rl_speed);
      stream.next(m.rr_speed);
      stream.next(m.speed_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speed_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::speed_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::speed_fb_<ContainerAllocator>& v)
  {
    s << indent << "car_speed: ";
    Printer<float>::stream(s, indent + "  ", v.car_speed);
    s << indent << "turn_speed: ";
    Printer<float>::stream(s, indent + "  ", v.turn_speed);
    s << indent << "fl_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fl_speed);
    s << indent << "fr_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fr_speed);
    s << indent << "rl_speed: ";
    Printer<float>::stream(s, indent + "  ", v.rl_speed);
    s << indent << "rr_speed: ";
    Printer<float>::stream(s, indent + "  ", v.rr_speed);
    s << indent << "speed_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.speed_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_SPEED_FB_H
