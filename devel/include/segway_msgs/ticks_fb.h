// Generated by gencpp from file segway_msgs/ticks_fb.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_TICKS_FB_H
#define SEGWAY_MSGS_MESSAGE_TICKS_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct ticks_fb_
{
  typedef ticks_fb_<ContainerAllocator> Type;

  ticks_fb_()
    : fl_ticks(0)
    , fr_ticks(0)
    , rl_ticks(0)
    , rr_ticks(0)
    , ticks_timestamp(0)  {
    }
  ticks_fb_(const ContainerAllocator& _alloc)
    : fl_ticks(0)
    , fr_ticks(0)
    , rl_ticks(0)
    , rr_ticks(0)
    , ticks_timestamp(0)  {
  (void)_alloc;
    }



   typedef int32_t _fl_ticks_type;
  _fl_ticks_type fl_ticks;

   typedef int32_t _fr_ticks_type;
  _fr_ticks_type fr_ticks;

   typedef int32_t _rl_ticks_type;
  _rl_ticks_type rl_ticks;

   typedef int32_t _rr_ticks_type;
  _rr_ticks_type rr_ticks;

   typedef uint64_t _ticks_timestamp_type;
  _ticks_timestamp_type ticks_timestamp;





  typedef boost::shared_ptr< ::segway_msgs::ticks_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::ticks_fb_<ContainerAllocator> const> ConstPtr;

}; // struct ticks_fb_

typedef ::segway_msgs::ticks_fb_<std::allocator<void> > ticks_fb;

typedef boost::shared_ptr< ::segway_msgs::ticks_fb > ticks_fbPtr;
typedef boost::shared_ptr< ::segway_msgs::ticks_fb const> ticks_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::ticks_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::ticks_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::ticks_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::ticks_fb_<ContainerAllocator2> & rhs)
{
  return lhs.fl_ticks == rhs.fl_ticks &&
    lhs.fr_ticks == rhs.fr_ticks &&
    lhs.rl_ticks == rhs.rl_ticks &&
    lhs.rr_ticks == rhs.rr_ticks &&
    lhs.ticks_timestamp == rhs.ticks_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::ticks_fb_<ContainerAllocator1> & lhs, const ::segway_msgs::ticks_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ticks_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ticks_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ticks_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ticks_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ticks_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ticks_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::ticks_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8568cb2dc59e89f43ec7cc3cbeba23ec";
  }

  static const char* value(const ::segway_msgs::ticks_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8568cb2dc59e89f4ULL;
  static const uint64_t static_value2 = 0x3ec7cc3cbeba23ecULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::ticks_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/ticks_fb";
  }

  static const char* value(const ::segway_msgs::ticks_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::ticks_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 fl_ticks\n"
"int32 fr_ticks\n"
"int32 rl_ticks\n"
"int32 rr_ticks\n"
"uint64 ticks_timestamp\n"
;
  }

  static const char* value(const ::segway_msgs::ticks_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::ticks_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fl_ticks);
      stream.next(m.fr_ticks);
      stream.next(m.rl_ticks);
      stream.next(m.rr_ticks);
      stream.next(m.ticks_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ticks_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::ticks_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::ticks_fb_<ContainerAllocator>& v)
  {
    s << indent << "fl_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fl_ticks);
    s << indent << "fr_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fr_ticks);
    s << indent << "rl_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rl_ticks);
    s << indent << "rr_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_ticks);
    s << indent << "ticks_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.ticks_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_TICKS_FB_H
