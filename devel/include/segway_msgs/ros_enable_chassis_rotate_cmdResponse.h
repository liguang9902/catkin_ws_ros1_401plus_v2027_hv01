// Generated by gencpp from file segway_msgs/ros_enable_chassis_rotate_cmdResponse.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_ROS_ENABLE_CHASSIS_ROTATE_CMDRESPONSE_H
#define SEGWAY_MSGS_MESSAGE_ROS_ENABLE_CHASSIS_ROTATE_CMDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segway_msgs
{
template <class ContainerAllocator>
struct ros_enable_chassis_rotate_cmdResponse_
{
  typedef ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> Type;

  ros_enable_chassis_rotate_cmdResponse_()
    : chassis_enable_rotate_result(0)  {
    }
  ros_enable_chassis_rotate_cmdResponse_(const ContainerAllocator& _alloc)
    : chassis_enable_rotate_result(0)  {
  (void)_alloc;
    }



   typedef int16_t _chassis_enable_rotate_result_type;
  _chassis_enable_rotate_result_type chassis_enable_rotate_result;





  typedef boost::shared_ptr< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ros_enable_chassis_rotate_cmdResponse_

typedef ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<std::allocator<void> > ros_enable_chassis_rotate_cmdResponse;

typedef boost::shared_ptr< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse > ros_enable_chassis_rotate_cmdResponsePtr;
typedef boost::shared_ptr< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse const> ros_enable_chassis_rotate_cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator1> & lhs, const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.chassis_enable_rotate_result == rhs.chassis_enable_rotate_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator1> & lhs, const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3efadba604891c5858b658cabff092";
  }

  static const char* value(const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3efadba604891cULL;
  static const uint64_t static_value2 = 0x5858b658cabff092ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/ros_enable_chassis_rotate_cmdResponse";
  }

  static const char* value(const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16   chassis_enable_rotate_result    #0:success; others: coutdown remaining time(seconds)\n"
;
  }

  static const char* value(const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chassis_enable_rotate_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ros_enable_chassis_rotate_cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::ros_enable_chassis_rotate_cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "chassis_enable_rotate_result: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_enable_rotate_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_ROS_ENABLE_CHASSIS_ROTATE_CMDRESPONSE_H
