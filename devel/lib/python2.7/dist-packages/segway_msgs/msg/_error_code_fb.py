# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from segway_msgs/error_code_fb.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class error_code_fb(genpy.Message):
  _md5sum = "d0de715e9b0108218da1d2b8fa36d04b"
  _type = "segway_msgs/error_code_fb"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 host_error
uint32 central_error
uint32 front_left_motor_error
uint32 front_right_motor_error
uint32 rear_left_motor_error
uint32 rear_right_motor_error
uint32 bms_error
uint32 brake_error"""
  __slots__ = ['host_error','central_error','front_left_motor_error','front_right_motor_error','rear_left_motor_error','rear_right_motor_error','bms_error','brake_error']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       host_error,central_error,front_left_motor_error,front_right_motor_error,rear_left_motor_error,rear_right_motor_error,bms_error,brake_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(error_code_fb, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.host_error is None:
        self.host_error = 0
      if self.central_error is None:
        self.central_error = 0
      if self.front_left_motor_error is None:
        self.front_left_motor_error = 0
      if self.front_right_motor_error is None:
        self.front_right_motor_error = 0
      if self.rear_left_motor_error is None:
        self.rear_left_motor_error = 0
      if self.rear_right_motor_error is None:
        self.rear_right_motor_error = 0
      if self.bms_error is None:
        self.bms_error = 0
      if self.brake_error is None:
        self.brake_error = 0
    else:
      self.host_error = 0
      self.central_error = 0
      self.front_left_motor_error = 0
      self.front_right_motor_error = 0
      self.rear_left_motor_error = 0
      self.rear_right_motor_error = 0
      self.bms_error = 0
      self.brake_error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8I().pack(_x.host_error, _x.central_error, _x.front_left_motor_error, _x.front_right_motor_error, _x.rear_left_motor_error, _x.rear_right_motor_error, _x.bms_error, _x.brake_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.host_error, _x.central_error, _x.front_left_motor_error, _x.front_right_motor_error, _x.rear_left_motor_error, _x.rear_right_motor_error, _x.bms_error, _x.brake_error,) = _get_struct_8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8I().pack(_x.host_error, _x.central_error, _x.front_left_motor_error, _x.front_right_motor_error, _x.rear_left_motor_error, _x.rear_right_motor_error, _x.bms_error, _x.brake_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.host_error, _x.central_error, _x.front_left_motor_error, _x.front_right_motor_error, _x.rear_left_motor_error, _x.rear_right_motor_error, _x.bms_error, _x.brake_error,) = _get_struct_8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8I = None
def _get_struct_8I():
    global _struct_8I
    if _struct_8I is None:
        _struct_8I = struct.Struct("<8I")
    return _struct_8I
